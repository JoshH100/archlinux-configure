- name: Startup tftp server to serve initial ipxe.efi
  include_role: name=tftp

- name: check if we already all the files for iPXE
  stat: path="{{ ipxe.dest }}/fs/x86_64/airootfs.sfs" get_md5=no
  register: previous

- name: Create image using mkosi
  include_role: name=mkosi
  when: previous.stat.islnk is not defined
  vars:
    output: "{{ ipxe.fs }}"

- name: create necessary paths (pxe and fs)
  file: path="{{ item }}" state=directory mode=0755
  with_items:
    - "{{ ipxe.dest }}"
    - "{{ ipxe.dest }}/fs/x86_64/"
    #    - "{{ ipxe.dest }}/efi"
    #- "{{ ipxe.dest }}/root"

- name: sign and copy in ipxe binaries
  block:
    - name: ipxe - install ipxe-netboot
      pacman: name=ipxe-netboot state=present
    - name: ipxe - deploy signing key
      copy: src=DB.key dest="{{ arch.key}}" 
    - name: ipxe - deploy signing crt
      copy: src=DB.crt dest="{{ arch.crt}}" 
    - name: ipxe - sign ipxe.efi
      command: "sbsign --key {{arch.key}} --cert {{arch.crt}} --output {{ ipxe.dest}}/ipxe.efi /usr/share/ipxe-netboot/ipxe.efi"
    #- file: src="/usr/share/ipxe-netboot/ipxe.efi" dest="{{ ipxe.dest }}/ipxe.efi" state=link
    #- file: src="/usr/share/ipxe-netboot" dest="{{ ipxe.dest }}/ipxe" state=link


# Currenly copies from the local host (remote_src=no)
- name: copy in files from mkosi
  block:
    - name: mkosi - copy airootfs.sfs
      copy: src="{{ ipxe.fs }}/airootfs.sfs" dest="{{ ipxe.dest }}/fs/x86_64/airootfs.sfs" remote_src=yes
    #- copy: src="{{ ipxe.fs/linux.signed }}" dest="{{ ipxe.dest }}/linux" remote_src= yes
    - name: mkosi - copy vmlinuz-linux 
      copy: src="{{ ipxe.fs }}/vmlinuz-linux" dest="{{ ipxe.dest }}/vmlinuz-linux" remote_src=yes
    - name: mkosi - copy initramfs-linux
      copy: src="{{ ipxe.fs }}/initramfs-linux.img" dest="{{ ipxe.dest }}/initramfs-linux.img" remote_src=yes


# add check if kernel is signed and then copy with .signed extension and skip singing

- name: fetch secure boot keys and certs # can sbsign write to same path?? 
  block:
    - name: sign boot files - install sbsigntools
      pacman: name=sbsigntools state=present
    - name: sign boot files - copy key
      copy: src=DB.key dest="{{ arch.mkosi.key }}"
    - name: sign boot files - copy crt
      copy: src=DB.crt dest="{{ arch.mkosi.crt }}"
    - name: sign boot files - sign files with sbsign
      command: "sbsign --key {{ arch.mkosi.key }} --cert {{ arch.mkosi.crt }} --output {{ ipxe.dest }}/vmlinuz-linux {{ ipxe.dest }}/vmlinuz-linux"
  when: false|bool

#- name: clone repo, build image, create ipxe fs structure
  #  block:
    #- git: repo="{{ arch.mkosi.ropo }}" dest="{{arch.mkosi.dest}}"
    #- shell: mkosi --output="{{ arch.mkosi.output }}" build chdir="{{ arch.mkosi.dest }}"
    #- mount: src="{{ arch.mkosi.output }}" path="{{ ipxe.dest }}/efi" opts="offset={{ arch.mkosi.iso.start1 }}" 
    #- mount: src="{{ arch.mkosi.output }}" path="{{ ipxe.dest }}/efi" opts="offset={{ arch.mkosi.iso.start1 }}"
    #- find: paths="{{ ipxe.dest }}/efi" recurse=yes patterns="linux"
    #  register: found_linux  
    #- file: src="{{ arch.mkosi.output }}" path="{{ found_linux.files[0].path }}" state=link
    #- find: paths="{{ ipxe.dest }}/efi" recurse=yes patterns="initrd"
    #  register: found_initrd 
    #- file: src="{{ arch.mkosi.output }}" path="{{ found_initrd.files[0].path }}" state=link
   

#- name: update archinstall.tar.gz
#  block:
    #    - file: path=/mnt/archinstall.tar.gz state=absent
    #- archive: path="{{ ipxe.images.live.src }}" dest="{{ ipxe.images.live.dest }}"

- name: debug loop
  debug: msg="{{ item.value.src }} "
  loop: "{{ ipxe.images.archlinux | dict2items }}"

#- name: copy linux, initrd, and rootfs to appropriate paths
#  copy: src="{{ item.value.src }}" dest="{{ ipxe.dest}}/{{ item.value.dest }}"
#  loop: "{{ ipxe.images.archlinux | dict2items }}"
  
- name: copy archlinux.ipxe from template
  template:
    src: archlinux.ipxe.j2
    dest: "{{ ipxe.dest }}/archlinux.ipxe"

- name: premessage for http server
  debug: msg="starting HTTP server on port 3000"

- name: start http server on port 3000 in /mnt/
  shell: python -m http.server --directory {{ ipxe.dest }} 3000 

